@import 'common.cocoascript'
@import 'xml.cocoascript'
@import 'lib_MD5.framework/lib_MD5.js'

var context;
var docContext;
var globalPage;
var selection;
var artBoards;
var app;
var filePath;
var magazineCoefficient;
var textCoefficient;

var magazineWidth;
var magazineHeight;

var tree;
var processingTree;
var alignmentTree;

var libMD5;

onRun = function(contextEnv) {
  var exportParameters = openExportDialog(contextEnv);
  if (exportParameters[0] == "1000") {
    magazineCoefficient = Number(exportParameters[1].charAt(0));
    initPlugin();
    main();
  } else contextEnv.document.showMessage("Canceled");

  //Initialize global variables
  function initPlugin() {
    context = contextEnv;
    docContext = context.document;
    globalPage = docContext.currentPage();
    selection = globalPage.selectedLayers().layers();
    artBoards = globalPage.layers();
    app = context.api().Application();
    filePath = selectFolder();
    libMD5 = lib_MD5.alloc().init(); //initializing Objective-C object from lib_MD5.framework
    textCoefficient = 1;

    try{
      var size = getMostCommonSize();
      magazineWidth = size.width * magazineCoefficient;
      magazineHeight = size.height * magazineCoefficient;
    }
    catch (e) {
      app.alert('Error! ' + e.name + ":" + e.message + "\n" + e.stack, "Warning");
      throw e;
    }

    tree = [];
    processingTree = {
      "MSArtboardGroup" : addPage,
      "MSLayerGroup" : addGroup,
      "MSShapeGroup" : addImage,
      "MSBitmapLayer" : addImage,
      "MSTextLayer" : addText,
      "MSSymbolInstance" : addImage,
      "MSOvalShape" : addImage,
      "MSShapePathLayer" : addImage,
      "MSRectangleShape" : addImage
    };
    alignmentTree = ["Qt::AlignLeft", "Qt::AlignRight", "Qt::AlignHCenter", "Qt::AlignJustify"];
  }


  function main() {
    if (artBoards.length > 0) {
      if (filePath.length != 0) {
        initMagazine();
        processFile();
        XMLToFile(nodeToXML(tree[0], 0), filePath);
      } else docContext.showMessage("Canceled");
    } else app.alert("Please, create an ArtBoard", "Warning!");
  }

  function addPage(page, parent, smthSelected) {
    var l = page.layers().count() - 1;
    var childCount = 0;
    var isSelected = false;
    var node = {
      type : "page",
      name : page.name(),
      isBlock: false,
      properties : {
        title : escapeCharacters(page.name()),
        x: 0,
        y: 0,
        pageWidth: 1,
        pageHeight: 1,
        rotationZ: 0
      },
      subBlocks: [
        {
          type: "style",
          properties: {
            pageBackgroundColor : page.hasBackgroundColor() && page.includeBackgroundColorInExport() ? RGBAtoHEX(page.backgroundColor()) : "#ffffffff"
          }
        }
      ],
      children : []
    };
    parent.children.push(node);
    if (selection.includes(page) || smthSelected) {
      childCount++;
      smthSelected = true;
    }

    while (l >= 0) {
      childCount += processingTree[page.layers()[l].class()](page.layers()[l], node, smthSelected);
      l--;
    }

    if (childCount == 0) parent.children.pop(node);
    return childCount;
  }

  function addGroup(group, parent, smthSelected) {
    var l = group.layers().count() - 1;
    var childCount = 0;
    var frame = group.frame();
    var node = {
      type : "group",
      name : group.name(),
      isBlock: false,
      properties : {
        title : escapeCharacters(group.name()),
        x: Math.round(frame.x() * magazineCoefficient/magazineWidth*1e5)/1e5 + parent.properties.x,
        y: Math.round(frame.y() * magazineCoefficient/magazineHeight*1e5)/1e5 + parent.properties.y,
        width: Math.round(frame.width() * magazineCoefficient/magazineWidth*1e5)/1e5,
        height: Math.round(frame.height() * magazineCoefficient/magazineHeight*1e5)/1e5
        //rotationZ: -group.rotation() + parent.properties.rotationZ
      },
      children : []
    };
    parent.children.push(node);

    if (selection.includes(group) || smthSelected) {
      childCount++;
      smthSelected = true;
    }

    while (l >= 0) {
      childCount += processingTree[group.layers()[l].class()](group.layers()[l], node, smthSelected);
      l--;
    }

    if (childCount == 0) parent.children.pop(node);
    return childCount;
  }

  function addImage(item, parent, smthSelected) {
    if (smthSelected || selection.includes(item) || selection.includes(item.parentObject())) { //shorter
      var name = Math.random();
      var len = parent.children.length;
      if (isRectangle(item) && !item.hasClippingMask()){
        return addText(item, parent, smthSelected);
      }
      else {
        name = exportImage(item, name);
        if (item.hasClippingMask()) {
          if (len > 0) {
            parent.children[len - 1].subBlocks[0].properties.blockMaskMedia = name,
            parent.children[len - 1].subBlocks[0].properties.blockMaskFillMode = "CEnums::PreserveAspectFit"
            if (!item.layers()[0].edited() || isRectangle(item)) {
              parent.children[len - 1].properties.x = Math.round(item.frameForTransforms().origin.x * magazineCoefficient/magazineWidth*1e5)/1e5 + parent.properties.x
              parent.children[len - 1].properties.y = Math.round(item.frameForTransforms().origin.y * magazineCoefficient/magazineHeight*1e5)/1e5 + parent.properties.y
              parent.children[len - 1].properties.width = Math.round(item.frame().width() * magazineCoefficient/magazineWidth*1e5)/1e5
              parent.children[len - 1].properties.height = Math.round(item.frame().height() * magazineCoefficient/magazineHeight*1e5)/1e5
            }
          }
        } else {
        var node = {
          type : "Gallery",
          name : item.name(),
          isBlock: true,
          specialData: true,
          properties : {
            title: escapeCharacters(item.name()),
            x: Math.round(item.frameForTransforms().origin.x * magazineCoefficient/magazineWidth*1e5)/1e5 + parent.properties.x,
            y: Math.round(item.frameForTransforms().origin.y * magazineCoefficient/magazineHeight*1e5)/1e5 + parent.properties.y,
            width: Math.round(item.frame().width() * magazineCoefficient/magazineWidth*1e5)/1e5,
            height: Math.round(item.frame().height() * magazineCoefficient/magazineHeight*1e5)/1e5
            //rotationZ: -group.rotation() + parent.properties.rotationZ
          },
          subBlocks: [
            {
              type: "style",
              properties: {
                //blockOpacity: item.style().fill().color().alpha(), //check if item is hidden
                blockBackgroundColor: "#00ffffff"
              },
            },
            {
              type: "delegate",
              properties :{}
            },
            {
              type: "specialData",
              point: '<point x="0.5" y="0.5" text="" image="' + name + '"/>'
            }
          ],
          children : []
        };
        parent.children.push(node);
        return 1; // ?
      }
      return 0; //?
      }
    }
    return 0;
  }

  // x/magazineWidth for normalizing coords
  // Math.round and 1e5 for...
  function addText(item, parent, smthSelected) {
    if (smthSelected || selection.includes(item) || selection.includes(item.parentObject())) {
      var border = item.style().border();
      var fill = item.style().fill();
      var node = {
        type : "Article",
        name : item.name(),
        isBlock: true,
        properties : {
          title: escapeCharacters(item.name()),
          x: Math.round(item.frameForTransforms().origin.x * magazineCoefficient/magazineWidth*1e5)/1e5 + parent.properties.x,
          y: Math.round(item.frameForTransforms().origin.y * magazineCoefficient/magazineHeight*1e5)/1e5 + parent.properties.y,
          width: Math.round(item.frame().width() * magazineCoefficient/magazineWidth*1e5)/1e5,
          height: Math.round(item.frame().height() * magazineCoefficient/magazineHeight*1e5)/1e5
          //rotationZ: -item.rotation() + parent.properties.rotationZ
        },
        subBlocks: [
          {
            type: "delegate",
            properties : {
              plainText: escapeCharacters(item.attributedString ? item.attributedString().string() : "")
            }
          },
          {
            type: "style",
            properties: {
              //blockOpacity: item.style().fill().color().alpha(), //check if item is hidden
              blockBackgroundColor: item.class() == "MSShapeGroup" && fill ? fill.isEnabled() ? RGBAtoHEX(fill.color()) : "#00000000" : "#00000000",
              blockBorderColor: border ? RGBAtoHEX(border.color()) : "#00000000",
              blockBorderWidth: border ? border.isEnabled() ? border.thickness() : 0 : 0,
              blockBorderRadius: (item.class() == "MSShapeGroup" && item.layers()[0].fixedRadius) ? item.layers()[0].fixedRadius()/1000 : 0
            },
            subBlocks: [
              {
                type: "style-font-block-body",
                isBlock: false,
                properties: {
                  family: item.font ? item.font().familyName(): NaN,
                  size: item.fontSize ? item.fontSize() * textCoefficient * magazineCoefficient : 0,
                  color: getColorOfTextItem(item),
                  horizontalAlignment: item.textAlignment ? (alignmentTree[item.textAlignment()] || alignmentTree[0]) : NaN //for back-compability of SketchApp
                }
              }
            ]
          }
        ],
        children : []
      };
      parent.children.push(node);
      return 1;
    }
    return 0;
  }

  function initMagazine() {
    var root = {
      type : "magazine",
      name : globalPage.name(),
      isBlock : false,
      properties : {
        width : magazineWidth,
        height: magazineHeight,
      },
      subBlocks: [
        {
          type: "magazineStyle",
          properties: {
            statusBarVisibility: false,
            blockBackgroundColor: "#00ffffff"
          }
        }
      ],
      children : []
    };

    //Service page
    var navPage = {
      type : "page",
      name : "Navigation",
      isBlock : false,
      properties : {
        title: "Navigation",
        x: 0,
        y: 0,
        width : 1,
        height: 1
      },
      children : []
    };

    root.children.push(navPage);
    tree[0] = root;
  }

  function processFile() {
    try {
      for (var i = 0; i < artBoards.count(); i++)
        processingTree[artBoards[i].class()](artBoards[i], tree[0], selection.count() == 0);
      pmtAlert("Export completed", "Path: " + filePath, "Done").runModal();
    }
    catch (error) {
      app.alert('Error ' + error.name + ":" + error.message + "\n" + error.stack, "Warning");
    }
  }
};
